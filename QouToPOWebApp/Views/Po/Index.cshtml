@model IEnumerable<object>

@{
    ViewData["Title"] = "PO";
    string currentPath = ViewBag.CurrentPath as string ?? "";
    string parentPath = System.IO.Path.GetDirectoryName(currentPath) ?? "";
    string _poPath = System.IO.Path.Combine(Directory.GetCurrentDirectory(), "AppData/PO");
}

<h1>@ViewData["Title"]</h1>

<div class="dropdown dropend mb-4">
    <button class="btn btn-primary shadow dropdown-toggle px-3" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        Create
    </button>
    <ul class="dropdown-menu">
        <li><a asp-controller="Po" asp-action="New" class="dropdown-item">New PO</a></li>
        <li><a asp-controller="Po" asp-action="FromQuotation" class="dropdown-item disabled">From Quotation file</a></li>
    </ul>
</div>

<div class="card p-3 border-0 shadow-sm">
    <!-- Breadcrumb Navigation -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            @foreach (var crumb in ViewBag.Paths as List<QouToPOWebApp.Models.MiscModels.Breadcrumb>)
            {
                if (crumb.IsCurrent)
                {
                    <li class="breadcrumb-item active" aria-current="page"><i class="bi bi-folder2-open"></i> @crumb.Title</li>
                }
                else
                {
                    <li class="breadcrumb-item">
                        <a class="text-decoration-none" href="@Url.Action("Index", new { path = crumb.Url })">@crumb.Title</a>
                    </li>
                }
            }
        </ol>
    </nav>

    <!-- Back button & Search Bar -->
    <div class="row justify-content-between">
        <div class="col">
            @if (!string.IsNullOrEmpty(currentPath))
            {
                <a href="@Url.Action("Index", new { path = parentPath })" class="btn btn-light border px-4"><i class="bi bi-arrow-left"></i> Back</a>
            } else
            {
                <a href="#" class="btn btn-light border px-4 disabled"><i class="bi bi-arrow-left"></i> Back</a>
            }
        </div>
        <div class="col-auto">
            <form method="get" action="@Url.Action("Index")" class="mb-3">
                <input type="hidden" name="path" value="@currentPath" />
                <div class="input-group">
                    <input type="text" name="searchTerm" class="form-control" placeholder="Search files and folders..." value="@Context.Request.Query["searchTerm"]">
                    <button type="submit" class="btn btn-light border">Search</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Files and Folders Table -->
    <table class="table datatable table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th class="text-nowrap">Date created</th>
                <th>Size</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                if (item is System.IO.DirectoryInfo dir)
                {
                    int index = dir.FullName.IndexOf(_poPath);
                    var dirPath = System.IO.Path.Combine(currentPath, dir.Name);

                    if (index != -1)
                    {
                        dirPath = dir.FullName.Substring(index + _poPath.Length).TrimStart('\\', '/');
                    }

                    <tr onclick="window.location='@Url.Action("Index", new { path = dirPath })'" style="cursor:pointer;">
                        <td><i class="bi bi-folder"></i> @dir.Name</td>
                        <td>Folder</td>
                        <td>@dir.CreationTime.ToString("yyyy-MM-dd HH:mm")</td>
                        <td></td>
                        <td></td>
                    </tr>
                }
                else if (item is System.IO.FileInfo file)
                {
                    <tr>
                        <td class="text-truncate" style="max-width:600px;">
                            <a class="text-decoration-none" href="#" data-id="@file.FullName.Replace(_poPath, "").TrimStart('\\', '/')" onclick="previewFile(this)">
                                @switch (file.Extension.TrimStart('.').ToLower())
                                {
                                    case "pdf":
                                        <i class="bi bi-file-earmark-pdf"></i>
                                        break;
                                    case "png":
                                    case "jpg":
                                    case "jpeg":
                                        <i class="bi bi-file-earmark-image"></i>
                                        break;
                                    case "xlsx":
                                        <i class="bi bi-file-earmark-spreadsheet"></i>
                                        break;
                                    case "txt":
                                        <i class="bi bi-file-earmark-text"></i>
                                        break;
                                    case string ext when new[] { "obj", "stl", "fbx", "dae", "iges", "step", "3ds", "skp", "amf", "gbl", "vrml" }.Contains(ext):
                                        <i class="bi bi-badge-3d"></i>
                                        break;
                                    default:
                                        <i class="bi bi-file-earmark-richtext"></i>
                                        break;
                                }
                                 @file.Name
                            </a>
                        </td>
                        <td>@(file.Extension.TrimStart('.').ToUpper() + " File")</td>
                        <td class="text-nowrap">@file.CreationTime.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@(file.Length / 1024) KB</td>
                        <td class="text-nowrap">
                            <a href="@Url.Action("Download", new { path = System.IO.Path.GetRelativePath(_poPath, file.FullName) })" class="btn btn-sm btn-light">
                                <i class="bi bi-download"></i> Download
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<!-- Preview Modal -->
<div class="modal fade" id="filePreviewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h1 class="modal-title fs-5" id="filePreviewModalLabel">Preview</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <iframe id="fileFrame" src="" width="100%" height="900px"></iframe>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $("table.datatable").DataTable({
            columnDefs: [
                { targets: 0, className: "text-start" } // Bootstrap class for left alignment
            ],
            responsive: true,
            fixedHeader: true,
            filter: false,
            lengthChange: false,
            pageLength: 15, // Set default number of rows per page
        });

        function previewFile(a) {
            var validPreviewFiles = ["pdf", "png", "jpg", "jpeg"];

            var e = $(a);
            var filePath = e.data("id");
            var fileExtension = filePath.split('.').pop().toLowerCase();

            $('#fileFrame').attr("src", `/Pdf/GetSavedFile?filePath=${encodeURIComponent(filePath)}#toolbar=0&view=Fit&navpanes=0`);

            if (validPreviewFiles.includes(fileExtension)) {
                $("#filePreviewModal").modal("show");
            }
        }
    </script>
}